pragma solidity ^0.8.17;

import { UltraVerifier } from "./ultra-verifier/plonk_vk.sol";
//import "../circuits/target/contract.sol";

contract InsuranceClaimProofVerifier {

    string public version;

    UltraVerifier public verifier;

    mapping(address => bool) public claimed;

    constructor(UltraVerifier _verifier) {
        verifier = _verifier;
        version = "0.1.0";
    }

    /**
     * @notice - Verify the insurance claim proof
     * @param proof - The proof generated by the ZK circuit
     * @param publicInputs - The public inputs of the proof
     */
    function verifyInsuranceClaimProof(bytes calldata proof, bytes32[] calldata publicInputs) public view returns (bool) {
        bool proofResult = verifier.verify(proof, publicInputs);
        require(proofResult, "A given InsuranceClaimProof is not valid");
        return proofResult;
    }

    /**
     * @notice - Submit the insurance claim
     */
    function submitInsuranceClaim(bytes calldata proof, bytes32[] calldata publicInputs) public returns (bool) {
        bool proofResult = verifyInsuranceClaimProof(proof, publicInputs);
        //bool proofResult = insuranceClaimProofVerifier.verifyInsuranceClaimProof(proof, publicInputs);
        require(proofResult, "A given InsuranceClaimProof is not valid");

        claimed[msg.sender] = true;

        return proofResult;
    }


    /**
     * @notice - This function is a test function
     */
    function poke() public returns (bool) {
        return true;
    }
}
